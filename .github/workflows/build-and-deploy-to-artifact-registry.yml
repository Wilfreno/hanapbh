name: Build and Deploy to Artifact registry

on:
  release:
    types:
      - published

env:
  PROJECT_ID: hanapbh
  GAR_LOCATION: asia-southeast1
  CLIENT_SERVICE: hanapbh-client
  SERVER_SERVICE: hanapbh-server
  REGION: asia-southeast1

jobs:
  build_push_to_artifact_registry_and_cloud_run:
    permissions:
      contents: "write"
      id-token: "write"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            "${{ env.GAR_LOCATION }}/${{ env.CLIENT_SERVICE }}"
            "${{ env.GAR_LOCATION }}/${{ env.SERVER_SERVICE }}"
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Determine Tag
        id: tag
        run: |
          # Determine the tag based on the repository or branch
          echo "REPO_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}"
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}"

      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v3"
        with:
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build Client Image
        run: |-
          docker build -t "${{ env.CLIENT_SERVICE }}:${{ env.REPO_TAG }}" ./client \
          --build-arg GOOGLE_CLIENT_ID="${{secrets.GOOGLE_CLIENT_ID}}" \
          --build-arg GOOGLE_CLIENT_SECRET="${{secrets.GOOGLE_CLIENT_SECRET}}" \
          --build-arg GOOGLE_PLACES_API_KEY="${{secrets.GOOGLE_PLACES_API_KEY}}" \
          --build-arg NEXT_PUBLIC_SERVER="${{secrets.NEXT_PUBLIC_SERVER}}" \
          --build-arg SERVER_URL="${{secrets.SERVER_URL}}" \
          --build-arg ClIENT_URL="${{secrets.ClIENT_URL}}" \
          --build-arg NEXTAUTH_SECRET="${{secrets.NEXTAUTH_SECRET}}" \
          --build-arg NEXTAUTH_URL="${{secrets.NEXTAUTH_URL}}"

      - name: Tag Client Image
        run: docker tag "${{ env.CLIENT_SERVICE }}:${{ env.REPO_TAG }}" "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CLIENT_SERVICE }}/${{ env.CLIENT_SERVICE }}:${{env.REPO_TAG }}"

      - name: Push Client Image to Artifact Registry
        run: docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CLIENT_SERVICE }}/${{ env.CLIENT_SERVICE }}:${{env.REPO_TAG }}"

      - name: Build Server Image
        run: |-
          docker build -t "${{env.SERVER_SERVICE}}:${{ env.REPO_TAG }}" ./server \
          --build-arg GOOGLE_GEOCODE_API_KEY="${{secrets.GOOGLE_GEOCODE_API_KEY}}" \
          --build-arg GOOGLE_PLACES_API_KEY="${{secrets.GOOGLE_PLACES_API_KEY}}" \
          --build-arg MONGODB_URI="${{secrets.MONGODB_URI}}" \
          --build-arg GMAIL_2F_AUTH_APP_PASS="${{secrets.GMAIL_2F_AUTH_APP_PASS}}"

      - name: Tag Server Image
        run: docker tag "${{env.SERVER_SERVICE}}:${{ env.REPO_TAG }}" "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVER_SERVICE }}/${{ env.SERVER_SERVICE }}:${{ env.REPO_TAG }}"

      - name: Push Server Image to Artifact Registry
        run: docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVER_SERVICE }}/${{ env.SERVER_SERVICE }}:${{ env.REPO_TAG }}"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVER_SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVER_SERVICE }}/${{ env.SERVER_SERVICE }}:${{ env.REPO_TAG }}

      - name: Update README
        id: update-readme
        run: |
          CLIENT_TAG="asia-southeast1-docker.pkg.dev/hanapbh/hanapbh-client/hanapbh-client:v1.0.17"
          SERVER_TAG="asia-southeast1-docker.pkg.dev/hanapbh/hanapbh-server/hanapbh-server:v1.0.17"

          sed -i 's|Client: .*|Client: '"$CLIENT_TAG"'|' README.md
          sed -i 's|Server: .*|Server: '"$SERVER_TAG"'|' README.md

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          BRANCH_NAME="update-readme-$(date +%Y%m%d%H%M%S)"
          git checkout -b $BRANCH_NAME
          git add README.md
          git commit -m 'Update README.md with latest Docker image tags'
          git push origin $BRANCH_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        id: create-pull-request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.update-readme.outputs.BRANCH_NAME }}
          commit-message: "Update README.md with latest Docker image tags"
          title: "Update README.md with latest Docker image tags"
          body: "This PR updates the README.md with the latest Docker image tags."
          labels: "auto-update"

      - name: Approve Pull Request
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.PAT }}
          pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number }}

      - name: Wait for PR to be merged
        id: wait-for-pr
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = '${{ steps.create-pull-request.outputs.pull-request-number }}';
            let pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            while (pr.data.state !== 'closed') {
              await new Promise(resolve => setTimeout(resolve, 10000)); 
              pr = await github.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
            }
            return pr.data.merge_commit_sha;

      - name: Delete Branch
        if: steps.wait-for-pr.outputs.merge_commit_sha != ''
        run: |
          git push origin --delete ${{ steps.update-readme.outputs.BRANCH_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
